Quais s√£o os <mark>**tipos de teste**</mark>? 
Quais s√£o as <mark>**t√©cnicas de teste**</mark> para aplic√°-los?
Como construir uma <mark>**estrat√©gia de teste**</mark> na minha squad? üïµÔ∏è‚Äç‚ôÄÔ∏è

Nessa page o Cap√≠tulo de Qualidade compartilha refer√™ncias e breves defini√ß√µes sobre os conceitos que envolvem Testes de Software üßê
[[_TOC_]]

# Tipos de Teste
## Unit√°rioüéØ
---
### O que √©?ü§î
> O teste de unidade tem como foco as menores unidades de um programa, que podem ser fun√ß√µes, procedimentos, m√©todos ou classes. Nesse contexto, espera-se que sejam identificados erros relacionados a algoritmos incorretos ou mal implementados, estrutura de dados incorretas ou simples erros de programa√ß√£o. Como cada unidade √© testada separadamente, o teste de unidade pode ser aplicado √† medida que ocorre a implementa√ß√£o das unidades e pelo pr√≥prio desenvolvedor, sem a necessidade de dispor-se do sistema totalmente finalizado.
<p style="text-align:right"><i> Delamaro, M.; Maldonado, J.; Jico, M. em Introdu√ß√£o ao Teste de Software. 2016, pg 25. </i></p>

Os testes unit√°rios s√£o respons√°veis por garantir o funcionamento de pequenas partes do c√≥digo, por exemplo os testes de uma fun√ß√£o que calcula o valor de cada parcela de um empr√©stimo de acordo com determinados requisitos/par√¢metros (como exemplo temos as taxas, ou at√© mesmo a quantidade de parcelas), ou tamb√©m o teste da implementa√ß√£o de uma [Factory](https://www.tutorialspoint.com/design_pattern/factory_pattern.htm)  que deve retornar um objeto de constru√ß√£o espec√≠fica.
√â muito comum se encontrar em testes unit√°rios o pattern [AAA "Arrange, Act and Assert"](https://medium.com/@pjbgf/title-testing-code-ocd-and-the-aaa-pattern-df453975ab80) que possui uma constru√ß√£o n√£o complexa, onde se tem um objeto de refer√™ncia que √© usado como compara√ß√£o para o resultado de factory, ou o valor esperado √© comparado ao retornado de uma fun√ß√£o para que se tenha completa certeza de seu funcionamento. 
| Arrange | Act | Assert  |
|---------|-----|---------|
| 10      | result = somar(5,5) | 10 == result |
### Import√¢nciaüÉè
Os testes unit√°rios s√£o de grande import√¢ncia pois s√£o agentes imediatos ao se finalizar uma manuten√ß√£o em um trecho de c√≥digo, podendo se executar apenas o teste unit√°rio da unidade ao qual foi alterada garantindo que as regras de neg√≥cio e expectativas com o trecho de c√≥digo sejam mantidas.
Al√©m de garantir o funcionamento da unidade os testes unit√°rios s√£o muito mais baratos que um teste [end to end](http://www.stephanybatista.com/2018/05/01/voce-sabe-o-que-e-teste-e2e/) por exemplo, pois um teste de unidade √© muito r√°pido consome menos recurso para sua execu√ß√£o al√©m de sua manuten√ß√£o ser muito mais √°gil.

### Refer√™ncias
[Curso - Introdu√ß√£o ao Teste de Software (Coursera[ FREE ])](https://www.coursera.org/learn/intro-teste-de-software)
[Davyson Lima, Entenda de uma vez por todas o que s√£o testes unit√°rios, para que servem e como faz√™-los](https://medium.com/@dayvsonlima/entenda-de-uma-vez-por-todas-o-que-s%C3%A3o-testes-unit%C3%A1rios-para-que-servem-e-como-faz%C3%AA-los-2a6f645bab3)

## Mutante
---
### O que √©?
Os testes de muta√ß√£o por sua vez n√£o s√£o testes que validam o programa desenvolvido por natureza, mas sim a acuracidade do conjunto de testes desenvolvido. Nesse caso os testes de muta√ß√£o s√£o respons√°veis por efetuar mudan√ßas dentro do c√≥digo em alguma funcionalidade (Ou seja criar um mutante) e verificar o comportamento do teste que valida tal funcionalidade. A partir do momento em que um teste falha um mutante √© morto, pois suas valida√ß√µes obtiveram resultados diferentes do esperado correspondendo as expectativas.
Uma das formas de medir a efic√°cia dos testes com o teste de muta√ß√£o √© executar o calculo de uma pequena formula bem simples : 
|  C√°lculo de Escore de Muta√ß√£o   |
|-----|
|Escore De Mutacao = Mutantes Mortos / Total De Mutantes|

Com isso podemos avaliar com n√∫meros a acuracidade do nosso conjunto de testes!
### Import√¢ncia
Em busca de validar a qualidade do software desenvolvido o teste de muta√ß√£o vem com a responsabilidade de garantir que nosso conjunto de testes n√£o esta emitindo falsos positivos ou se at√© mesmo est√£o sendo eficazes de acordo com sua fun√ß√£o.

### Refer√™ncias
[Curso - Introdu√ß√£o ao Teste de Software (Coursera[ FREE ])](https://www.coursera.org/learn/intro-teste-de-software)

## Componente
---
### O que √©?
Conforme a complexidade da aplica√ß√£o aumenta a quantidade de comunica√ß√µes entre aplica√ß√µes aumentam e com isso como validar se o c√≥digo que est√° sendo testado est√° com problema? Ou se o problema est√° em outra aplica√ß√£o ao qual nos comunicamos?
Com o intuito de resolver estes problemas temos os testes de componentes onde a aplica√ß√£o √© testada totalmente isolada das demais ao qual se comunica. Para proporcionar este ambiente isolado, √© constru√≠do atrav√©s de [Mocks](https://pt.wikipedia.org/wiki/Objeto_mock#:~:text=Objetos%20mock%2C%20objetos%20simulados%20ou,o%20comportamento%20de%20outros%20objetos.) que fornecem as informa√ß√µes exatas ao qual a aplica√ß√£o necessita para executar seus testes, sendo assim √© poss√≠vel validar o funcionamento da aplica√ß√£o sem a interfer√™ncia ou depend√™ncia de aplica√ß√µes externas.

Existem v√°rias bibliotecas para se criar mocks: 
Para testes de microsservi√ßos: 
[MounteBank:](http://www.mbtest.org/)

Pra Testes de Interface:
[Jest](https://jestjs.io/docs/en/mock-functions)
[React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)

###Import√¢ncia 
Os testes de componentes s√£o importantes nada mais nada menos que para se obter o resultado real da aplica√ß√£o sem validar suas integra√ß√µes mas sim o funcionamento do c√≥digo implementado.

### Refer√™ncias
[Curso - Introdu√ß√£o ao Teste de Software (Coursera[ FREE ])](https://www.coursera.org/learn/intro-teste-de-software)
[Documenta√ß√£o Jest](https://jestjs.io/docs/en/mock-functions)
[Documenta√ß√£o React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)
[Engineering at Spotify - Testing of Microsservices](https://engineering.atspotify.com/2018/01/11/testing-of-microservices/)

##Contrato
---
### O que √©?
Os testes de contrato s√£o respons√°veis por validar as interfaces do sistema, como exemplo o contrato com a API estar sendo cumprido. Al√©m de validar o contrato v√°lida tamb√©m como a API lida de acordo com o [Payload](https://www.devmedia.com.br/forum/rest-o-que-e-payload/600168) que ela recebe por exemplo:

Uma API para retornar os dados de uma pessoa necessita que seja enviado um requisi√ß√£o GET com o par√¢metro CPF
sendo assim temos os seguintes casos -> 
| Contrato | Requisi√ß√£o | Resultado |
|----------|------------|-----------|
|CPF com no m√≠nimo 11 caracteres|123.456.78| { ERRO: CPF deve conter no m√≠nimo 11 caracteres }|
|CPF com no m√≠nimo 11 caracteres| 123.456.789-78| { Nome: Joberval Rodrigues, CPF: 123.456.789-78, Endere√ßo ... } |

Podemos ver que no primeiro cen√°rio temos uma requisi√ß√£o que n√£o respeita o contrato ao qual a API exige para que os dados sejam fornecidos, sendo assim a aplica√ß√£o esta tratando o erro de contrato com uma mensagem de erro.

J√° no segundo exemplo temos uma requisi√ß√£o que respeita o contrato com a API, sendo assim a aplica√ß√£o retorna os dados esperados corretamente.

###Import√¢ncia
O teste de contrato vem com a import√¢ncia de validar que a aplica√ß√£o est√° correspondendo de acordo com seu contrato, validando e tratando dados de entrada e sa√≠da.
###Refer√™ncias
[Curso - Introdu√ß√£o ao Teste de Software (Coursera[ FREE ])](https://www.coursera.org/learn/intro-teste-de-software)
[
Maximiliano Alves - Testes de contrato de API ](https://medium.com/cwi-software/testes-de-contrato-de-api-com-joi-1ce552fe2531)

##Integra√ß√£o
---
###O que √©?
> No teste de integra√ß√£o, que deve ser realizado ap√≥s serem testadas as unidades individualmente, a √™nfase √© dada na constru√ß√£o da estrutura do sistema. √Ä medida que as diversas partes do software s√£o colocadas para trabalhar juntas, √© preciso verificar se a intera√ß√£o entre elas funciona de maneira adequada e n√£o leva a erros.
<p style="text-align:right"><i> Delamaro, M.; Maldonado, J.; Jico, M. em Introdu√ß√£o ao Teste de Software. 2016, pg 25. </i></p>

Os testes de Integra√ß√£o tem como objetivo validar se os componentes de um sistema interagem corretamente uns com os outros, sendo eles comunica√ß√£o entre banco de dados, outros micro servi√ßos ou componentes externos. Quando falamos de micro servi√ßos isso se torna mais vis√≠vel, pois a transfer√™ncia e troca de informa√ß√µes entre estes componentes √© o que faz o sistema funcionar. Podemos ver os testes de integra√ß√£o tamb√©m validando o funcionamento da comunica√ß√£o entre a interface e um micro servi√ßo!

### Import√¢ncia 
Assim como os testes unit√°rios os testes de Integra√ß√£o s√£o baratos e simples de se construir, e conseguem entregar a valida√ß√£o de toda a comunica√ß√£o da aplica√ß√£o, podendo garantir que todos os servi√ßos e depend√™ncias da aplica√ß√£o est√£o se comunicando e se comportando como esperado.

### Refer√™ncias
[Curso - Introdu√ß√£o ao Teste de Software (Coursera [ FREE ])](https://www.coursera.org/learn/intro-teste-de-software)
[Adriano Wilbert - Desenvolvendo Testes de Integra√ß√£o](https://medium.com/cwi-software/desenvolvendo-testes-de-integra%C3%A7%C3%A3o-c642bb15909b)

---

# T√©cnicas de Teste
No cen√°rio atual ao qual nos encontramos existem v√°rias t√©cnicas de testes funcionais que nos ajudam a ser mais assertivos e construirmos uma menor quantidade de testes e mesmo assim cobrirmos a maior quantidade de comportamentos poss√≠veis, dentre elas temos:
 
## 1. Parti√ß√£o de Equival√™ncia

Esta t√©cnica consiste em dividir os valores utilizados em conjuntos que em si possuem um mesmo comportamento esperado. Como exemplo podemos ter que ao inserir valores **v√°lidos** em um sistema esperamos que a aplica√ß√£o execute com sucesso por√©m se inserirmos dados **inv√°lidos** a mesma aplica√ß√£o o comportamento esperado seria o retorno de uma cr√≠tica de erro informando que os dados s√£o inv√°lidos.

Sendo assim podemos entender que dados **v√°lidos** s√£o uma parti√ß√£o de equival√™ncia onde qualquer dado v√°lido devera ter o mesmo comportamento, tamb√©m valendo para dados **inv√°lidos** onde ao inserir qualquer dado inv√°lido tamb√©m √© esperado o mesmo comportamento.

### Refer√™ncias 
[Delamaro, M.; Maldonado, J.; Jico, M. em Introdu√ß√£o ao Teste de Software. 2016](https://www.amazon.com/Introdu%C3%A7%C3%A3o-Teste-Software-Portuguese-Brasil/dp/8535283528)
[Artigo T√©cnica de Teste ‚Äî Particionamento de Equival√™ncia](https://medium.com/revista-tspi/t%C3%A9cnica-de-teste-particionamento-de-equival%C3%AAncia-d32a7d689d82)
## 2. Valor Limite


 
---
#Estrat√©gia de Teste
## 1. Estrat√©gia de testes para Microservi√ßos

Uma das estrat√©gias de testes mais utilizadas em sistemas mais complexos √© a que vemos representada pela pir√¢mide de testes:
      
                                   
![](https://miro.medium.com/max/620/1*hn4MGJVM9m1XSOuRqdF3aQ.png)

Por√©m como principal foco da estrat√©gia podemos ter a combina√ß√£o entre diversos tipos de testes que garantem por si respectivas √°reas do microservi√ßo cada um com sua responsabilidade, proporcionando uma maior cobertura.

A pir√¢mide divide cada tipo de teste de acordo com a propor√ß√£o (em quantidade) que cada teste deve ser distribu√≠do dentro da estrat√©gia. Olhando de baixo para cima, podemos fazer algumas compara√ß√µes, entre elas custo, tempo de manuten√ß√£o/constru√ß√£o e complexidade que s√£o muito importantes para se criar uma estrat√©gia efetiva onde consegue-se extrair uma maior efici√™ncia com menor custo.

Fazendo um paralelo entre complexidade e custo, podemos ver que a propor√ß√£o de testes unit√°rios √© bem maior que a de testes e2e pois garantir pequenas partes do software √© muito menos complexo e custoso, n√£o tirando a import√¢ncia dos demais testes pois na pr√°tica testes de unidade n√£o validam a persist√™ncia de dados, coisa que um teste de integra√ß√£o tr√°s como fun√ß√£o. Contudo tendo as m√≠nimas partes do software em funcionamento, garantir que a integra√ß√£o est√° acontecendo corretamente se torna uma tarefa menos complexa e de simples execu√ß√£o.

Olhando para o paralelo tra√ßado a cima podemos ver que uma estrat√©gia de teste bem constru√≠da permite que cada teste tenha apenas uma responsabilidade, sendo muito mais perform√°tico e assertivo al√©m de termos a possibilidade de entrar no conceito de testes independentes e paralelismo.    
### Testes de Microservi√ßos e o Paran√° Banco 
#### Squad Plataforma
Dentro do plataforma, os testes s√£o divididos em v√°rios tipos, para que cada um com sua responsabilidade garanta o funcionamento pr√©vio para execu√ß√£o do pr√≥ximo teste.

Sequ√™ncia de testes plataforma:

Unit√°rio -> Mutantes -> Componente -> Contrato -> Integra√ß√£o -> Performance

Olhando para a premissa que cada teste garante o funcionamento pr√©vio para a execu√ß√£o do pr√≥ximo, podemos dizer que os testes unit√°rios fazem a valida√ß√£o de cada unidade, seguindo pelo teste de mutantes que valida se os testes de unidade est√£o sendo eficazes, logo em seguida temos os testes de componente onde se testa isoladamente uma funcionalidade da aplica√ß√£o garantindo que sem depend√™ncia externa ela possui o comportamento esperado, consecutivamente testa-se o contrato para validar como a Aplica√ß√£o se comporta de acordo com os dados de entrada, depois testes de Integra√ß√£o que validam as comunica√ß√µes externas da aplica√ß√£o(que podem ser banco de dados ou outra aplica√ß√£o), e por fim ap√≥s a garantia de que tudo est√° funcionando testamos a Performance de acordo com a demanda esperada para a aplica√ß√£o e seu comportamento em caso de sobrecarga. 

#Refer√™ncias
[Paulo Vitor - Estrat√©gias de testes em micro servi√ßos](https://medium.com/@paulovitor88/estrat%C3%A9gias-de-testes-em-micro-servi%C3%A7os-42e547e6b2f1)
[Martin Fowler - Testing Strategies in a Microservice Architecture](https://martinfowler.com/articles/microservice-testing/#conclusion-test-pyramid)
Trechos do livro [Building Microservices, Sam Newman ](https://www.oreilly.com/library/view/building-microservices/9781491950340/)


